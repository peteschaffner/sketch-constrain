// Reposition and resize group layers based on constraints (control + cmd c)

constrain();

function constrain() {
  // Must have a group selected to resize
  if (selection.count() == 0) {
    return alert('Nothing selected','Please select a group');
  }

  var group = selection[0].layers();

  var maxWidth = 0;
  var maxHeight = 0;
  var background;

  var layers = [];

  // create a new, mutable array of layers and find the background
  // by searching for the largest layer
  // TODO: figure out why `layers().array().forEach` is not working
  for (var i=0; i < group.count(); i++) {
    var w = group.array()[i].frame().width();
    var h = group.array()[i].frame().height();

    if (w > maxWidth && h > maxHeight ) {
      maxWidth = w;
      maxHeight = h;
      background = group.array()[i];
    }

    layers.push(group.array()[i]);
  }

  // remove background from layers array
  layers.splice(layers.indexOf(background), 1);

  // apply constraints to all layers
  layers.forEach(function(layer) {
    var bgX = background.frame().x();
    var bgY = background.frame().y();
    var bgW = background.frame().width();
    var bgH = background.frame().height();

    var layerW = layer.frame().width();
    var layerH = layer.frame().height();

    var top = null;
    var right = null;
    var bottom = null;
    var left = null;
    var width = null;
    var height = null;

    var constraints = layer.name()
      .match(/(t(op)?|r(ight)?|b(ottom)?|l(eft)?)\d+/ig);

    if (constraints) {
      constraints.forEach(function(constraint) {
        var property = constraint.toLowerCase().match(/\D+/i)[0];
        var value = Number(constraint.match(/\d+/i)[0]);

        switch(property) {
          case 'l':
          case 'left':
            left = value;
            break;

          case 't':
          case 'top':
            top = value;
            break;

          case 'r':
          case 'right':
            right = value;
            break;

          case 'b':
          case 'bottom':
            bottom = value;
            break;
        }
      });
    }

    // set width
    if (left != null && right != null) layer.frame().width = bgW - (left + right);

    // set height
    if (top != null && bottom != null) layer.frame().height = bgH - (top + bottom);

    // position layer
    if (bottom != null) layer.frame().y = (bgY + bgH) - (bottom + layerH);
    if (top != null) layer.frame().y = bgY + top;
    if (right != null) layer.frame().x = (bgX + bgW) - (right + layerW);
    if (left != null) layer.frame().x = bgX + left;

    // align middle
    if (top == null && bottom == null)
      layer.frame().y = (bgY + bgH) / 2 - (layerH / 2);

    // align center
    if (right == null && left == null)
      layer.frame().x = ((bgX + bgW) / 2) - (layerW / 2);
  });

  doc.showMessage('Constraints applied');
}

function alert(title, text) {
	 [[NSApplication sharedApplication] displayDialog:text withTitle:title]
}
